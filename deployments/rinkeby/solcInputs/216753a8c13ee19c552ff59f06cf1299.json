{
  "language": "Solidity",
  "sources": {
    "contracts/ContractA.sol": {
      "content": "pragma solidity ^0.8.3;\n\nimport \"./ContractB.sol\";\n\ncontract A {\n    uint256 public x;\n    B private _contractB;\n\n    event ESum(uint256 value);\n\n    constructor() public {\n        x = 1;\n    }\n\n    function setContractB(address contractAddress) external {\n        require(contractAddress != address(0), \"Cannot initialize with 0 address\");\n        _contractB = B(contractAddress);\n    }\n\n    function print() public {\n        uint256 y = _contractB.read();\n        x = x * 2;\n        emit ESum(x + y);\n    }\n}\n"
    },
    "contracts/ContractB.sol": {
      "content": "pragma solidity ^0.8.3;\n\ncontract B {\n    uint256 public y;\n    address public contractA;\n\n    constructor() public {\n        y = 1;\n    }\n\n    function setContractA(address contractAddress) external {\n        require(contractAddress != address(0), \"Cannot initialize with 0 address\");\n        contractA = contractAddress;\n    }\n\n    modifier onlyContractA() {\n        require(msg.sender == contractA);\n        _;\n    }\n\n    function read() public onlyContractA returns (uint256) {\n        y = y * 3;\n        return y;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}